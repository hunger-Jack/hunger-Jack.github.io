<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魔尊重楼</title>
  
  <subtitle>前端博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jirengujack.cn/"/>
  <updated>2018-01-23T17:52:52.000Z</updated>
  <id>http://jirengujack.cn/</id>
  
  <author>
    <name>Harry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-cli多页面应用(一)--基础结构搭建</title>
    <link href="http://jirengujack.cn/2018/01/24/vue-cli%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8(%E4%B8%80)--%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://jirengujack.cn/2018/01/24/vue-cli多页面应用(一)--基础结构搭建/</id>
    <published>2018-01-23T17:48:15.000Z</published>
    <updated>2018-01-23T17:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局安装vue官方提供的vue-cli脚手架工具"><a href="#全局安装vue官方提供的vue-cli脚手架工具" class="headerlink" title="全局安装vue官方提供的vue-cli脚手架工具"></a>全局安装vue官方提供的vue-cli脚手架工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g vue-cli</span></span><br></pre></td></tr></table></figure><h2 id="创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。"><a href="#创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。" class="headerlink" title="创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。"></a>创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack &lt;project-<span class="keyword">name</span>&gt; <span class="comment">//前提安装了了vue</span></span><br></pre></td></tr></table></figure><h2 id="初始化过程中的过程中会有些选项"><a href="#初始化过程中的过程中会有些选项" class="headerlink" title="初始化过程中的过程中会有些选项"></a>初始化过程中的过程中会有些选项</h2><ol><li>vue build选择runtime+compile，运行时加编译。</li><li>安装vue-router，ESLint、Karma+Mocha、Nightwatch根据需求选择安装。<br><img src="https://i.loli.net/2018/01/23/5a6629c66cf1d.png" alt="Jietu20180123-021221.png"></li><li><p>初始化完成之后会提示如果进入开发环境，一般是<code>npm run dev</code></p><a id="more"></a><h2 id="初始化之后是一个单页面的应用，我们要调整一下目录结构，使之成为多页面应用"><a href="#初始化之后是一个单页面的应用，我们要调整一下目录结构，使之成为多页面应用" class="headerlink" title="初始化之后是一个单页面的应用，我们要调整一下目录结构，使之成为多页面应用"></a>初始化之后是一个单页面的应用，我们要调整一下目录结构，使之成为多页面应用</h2><p><img src="https://i.loli.net/2018/01/23/5a662b9bf20e7.png" alt="03.png"></p></li><li><p>在开发目录src下创建modules和pages文件夹，分别存放模板文件和页面文件。</p></li><li>把有关页面的文件放在同一个文件夹方便统一管理。项目有几个页面就可以在pages下面创建几个文件。例如把所有首页内容都在index文件夹里面：<br> 把index.html(页面模板)，main.js(页面入口文件)，App.vue(页面使用组件，公共组件    放在components文件夹下)，assets(静态资源)，router(路由配置)都放在pages下的    index文件夹下面。把main.js改成index.js，保证页面的入口文件与模板文件名称一致。</li></ol><h2 id="配置多入口文件和多页面输出"><a href="#配置多入口文件和多页面输出" class="headerlink" title="配置多入口文件和多页面输出"></a>配置多入口文件和多页面输出</h2><ol><li>在/build/utils.js中添加两个方法：webpack的多入口文件和多页面输出</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> PAGE_PATH = path.resolve(__dirname, <span class="string">'../src/pages'</span>)</span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//多入口配置</span></span><br><span class="line">exports.entries = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//读pages下的所有文件夹的js文件绝对路径，也就是每个页面文件的入口文件</span></span><br><span class="line">  <span class="keyword">var</span> entryFiles = glob.sync(PAGE_PATH + <span class="string">'/*/*.js'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;</span><br><span class="line">  <span class="comment">//便利匹配到所有js文件路径，获取所有js文件名称，把对应的名称与路径添加到map对象，最后返回一个map对象，也就是多入口对象</span></span><br><span class="line">  entryFiles.forEach(<span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>))</span><br><span class="line">    map[filename] = filePath</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多页面输出配置</span></span><br><span class="line">exports.htmlPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//读pages下所有页面文件夹下的所有页面模板路径</span></span><br><span class="line">  <span class="keyword">let</span> entryHtml = glob.sync(PAGE_PATH + <span class="string">'/*/*.html'</span>)</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  entryHtml.forEach(<span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>))</span><br><span class="line">    <span class="keyword">let</span> conf = &#123;</span><br><span class="line">      template: filePath,<span class="comment">//模板路径</span></span><br><span class="line">      filename: filename + <span class="string">'.html'</span>,<span class="comment">//模板文件名</span></span><br><span class="line">      chunks: [filename],<span class="comment">//打包输出文件名字</span></span><br><span class="line">      inject: <span class="literal">true</span><span class="comment">//允许加入静态资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;<span class="comment">//如果是开发环境，使用此配置</span></span><br><span class="line">      conf = merge(conf, &#123;</span><br><span class="line">        chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, filename],</span><br><span class="line">        minify: &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,<span class="comment">//移除注释</span></span><br><span class="line">          collapseWhitespace: <span class="literal">true</span>,<span class="comment">//移除空白</span></span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span><span class="comment">//如果允许，移除属性引号</span></span><br><span class="line">        &#125;,</span><br><span class="line">        chunksSortMode: <span class="string">'dependency'</span><span class="comment">//模块文件按照依赖排序</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(<span class="keyword">new</span> HtmlWebpackPlugin(conf))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改webpack入口配置"><a href="#修改webpack入口配置" class="headerlink" title="修改webpack入口配置"></a>修改webpack入口配置</h2><p>打开/build/webpack.base.conf.js文件，做如下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">//如果有这句话，急着注释掉，以免出错</span></span><br><span class="line"><span class="comment">//context: path.resolve(__dirname, '../'),  </span></span><br><span class="line">entry: utils.entries(),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="修改webpack开发环境配置"><a href="#修改webpack开发环境配置" class="headerlink" title="修改webpack开发环境配置"></a>修改webpack开发环境配置</h2><p>打开/build/webpack.dev.conf.js文件，做一下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">//  new HtmlWebpackPlugin(&#123;</span></span><br><span class="line">  <span class="comment">//    filename: 'index.html',</span></span><br><span class="line">  <span class="comment">//    template: 'index.html',</span></span><br><span class="line">  <span class="comment">//    inject: true</span></span><br><span class="line">  <span class="comment">//  &#125;),</span></span><br><span class="line">  ......</span><br><span class="line">].concat(utils.htmlPlugin())<span class="comment">//注释点以上代码，添加此代码</span></span><br></pre></td></tr></table></figure><h2 id="修改webpack生产环境配置"><a href="#修改webpack生产环境配置" class="headerlink" title="修改webpack生产环境配置"></a>修改webpack生产环境配置</h2><p>打开/build/webpack.prod.conf.js文件，做一下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// new HtmlWebpackPlugin(&#123;</span></span><br><span class="line">  <span class="comment">//   filename: config.build.index,</span></span><br><span class="line">  <span class="comment">//   template: 'index.html',</span></span><br><span class="line">  <span class="comment">//   inject: true,</span></span><br><span class="line">  <span class="comment">//   minify: &#123;</span></span><br><span class="line">  <span class="comment">//     removeComments: true,</span></span><br><span class="line">  <span class="comment">//     collapseWhitespace: true,</span></span><br><span class="line">  <span class="comment">//     removeAttributeQuotes: true</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">//   chunksSortMode: 'dependency'</span></span><br><span class="line">  <span class="comment">// &#125;),</span></span><br><span class="line">  ......</span><br><span class="line">].concat(utils.htmlPlugin())<span class="comment">//注释点以上代码，添加此代码</span></span><br></pre></td></tr></table></figure><pre><code>chunks: [&apos;manifest&apos;, &apos;vendor&apos;, filename]关于此代码，我自己的理解是，打包的时候先对vendor模块缓存，再提取公共部分模块，避免把所有的文件都打包</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;全局安装vue官方提供的vue-cli脚手架工具&quot;&gt;&lt;a href=&quot;#全局安装vue官方提供的vue-cli脚手架工具&quot; class=&quot;headerlink&quot; title=&quot;全局安装vue官方提供的vue-cli脚手架工具&quot;&gt;&lt;/a&gt;全局安装vue官方提供的vue-cli脚手架工具&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install -g vue-cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。&quot;&gt;&lt;a href=&quot;#创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。&quot; class=&quot;headerlink&quot; title=&quot;创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。&quot;&gt;&lt;/a&gt;创建项目模板，官方提供了5个模板，webpack、webpack-simple、browserify、browserify-simple、simple，我们使用的是webpack模板，初始化项目。&lt;/h2&gt;&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vue init webpack &amp;lt;project-&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;//前提安装了了vue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;初始化过程中的过程中会有些选项&quot;&gt;&lt;a href=&quot;#初始化过程中的过程中会有些选项&quot; class=&quot;headerlink&quot; title=&quot;初始化过程中的过程中会有些选项&quot;&gt;&lt;/a&gt;初始化过程中的过程中会有些选项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;vue build选择runtime+compile，运行时加编译。&lt;/li&gt;
&lt;li&gt;安装vue-router，ESLint、Karma+Mocha、Nightwatch根据需求选择安装。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2018/01/23/5a6629c66cf1d.png&quot; alt=&quot;Jietu20180123-021221.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化完成之后会提示如果进入开发环境，一般是&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://jirengujack.cn/categories/vue/"/>
    
      <category term="vue-cli" scheme="http://jirengujack.cn/categories/vue/vue-cli/"/>
    
    
      <category term="vue" scheme="http://jirengujack.cn/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://jirengujack.cn/tags/vue-cli/"/>
    
      <category term="webpack" scheme="http://jirengujack.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>git更新仓库名称</title>
    <link href="http://jirengujack.cn/2018/01/21/git%E6%9B%B4%E6%96%B0%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0/"/>
    <id>http://jirengujack.cn/2018/01/21/git更新仓库名称/</id>
    <published>2018-01-20T16:46:31.000Z</published>
    <updated>2018-01-20T17:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更改github仓库名称"><a href="#更改github仓库名称" class="headerlink" title="更改github仓库名称"></a>更改github仓库名称</h1><p><img src="https://i.loli.net/2018/01/21/5a6373473901c.png" alt="Snip20180121_1.png"><br>按照以上图片截图位置，输入新的名称，点击改名即可。<br><a id="more"></a></p><h1 id="在本地仓库关联"><a href="#在本地仓库关联" class="headerlink" title="在本地仓库关联"></a>在本地仓库关联</h1><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git@</span><span class="string">github.</span><span class="string">com:username/</span><span class="string">newrepo.</span><span class="string">git</span></span><br></pre></td></tr></table></figure><p>在本地仓库根目录下，输入以上命令就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;更改github仓库名称&quot;&gt;&lt;a href=&quot;#更改github仓库名称&quot; class=&quot;headerlink&quot; title=&quot;更改github仓库名称&quot;&gt;&lt;/a&gt;更改github仓库名称&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/01/21/5a6373473901c.png&quot; alt=&quot;Snip20180121_1.png&quot;&gt;&lt;br&gt;按照以上图片截图位置，输入新的名称，点击改名即可。&lt;br&gt;
    
    </summary>
    
      <category term="常见问题总结" scheme="http://jirengujack.cn/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="git" scheme="http://jirengujack.cn/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/git/"/>
    
    
      <category term="重命名仓库名称" scheme="http://jirengujack.cn/tags/%E9%87%8D%E5%91%BD%E5%90%8D%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0/"/>
    
      <category term="git" scheme="http://jirengujack.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git本地关联远程仓库</title>
    <link href="http://jirengujack.cn/2018/01/20/git%E6%9C%AC%E5%9C%B0%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>http://jirengujack.cn/2018/01/20/git本地关联远程仓库/</id>
    <published>2018-01-19T18:30:19.000Z</published>
    <updated>2018-01-24T19:01:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><p>执行以上代码之后，会发现当前文件下多了一个<code>.git</code>的文件，这个是用户管理跟踪本地版本库的，千万不要去乱动，不然就乱了可就麻烦了。</p><h1 id="在github创建一个远程仓库"><a href="#在github创建一个远程仓库" class="headerlink" title="在github创建一个远程仓库"></a>在github创建一个远程仓库</h1><p><img src="https://i.loli.net/2018/01/20/5a623aa9edfea.png" alt="QQ20180120-023559@2x.png"><br><img src="https://i.loli.net/2018/01/20/5a623b469e50a.png" alt="2.png"></p><a id="more"></a><h1 id="将本地仓库与远程仓库关联"><a href="#将本地仓库与远程仓库关联" class="headerlink" title="将本地仓库与远程仓库关联"></a>将本地仓库与远程仓库关联</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github<span class="selector-class">.com</span>:YotrolZ/helloTest.git</span><br><span class="line"><span class="comment">//git@开头的这个地址在github你刚刚建立的仓库里面找</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/01/20/5a623c499ad73.png" alt="3.png"><br><img src="https://i.loli.net/2018/01/20/5a623c4990a56.png" alt="4.png"></p><h1 id="拉取远程仓库信息"><a href="#拉取远程仓库信息" class="headerlink" title="拉取远程仓库信息"></a>拉取远程仓库信息</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin <span class="keyword">master</span> <span class="title">--allow-unrelated-histories</span></span><br></pre></td></tr></table></figure><p>这一步必须操作，否则是无法git push的，每次创建新的仓库关联这一步必须做得哦</p><p>然后就可以正常的使用git了，第一次push的时候需要写完整以下代码，以后就只需要git<br>push就可以了。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><ol><li>git init</li><li>git remote add origin git@github.com:YotrolZ/helloTest.git</li><li>git pull origin master –allow-unrelated-histories </li><li>touch a.html  【随意创建一个文件】</li><li>git add .</li><li>git commit -m add</li><li>git push -u origin master</li></ol><p><strong>我也不知道为什么重复git add，但是就是这样才成功了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初始化本地仓库&quot;&gt;&lt;a href=&quot;#初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化本地仓库&quot;&gt;&lt;/a&gt;初始化本地仓库&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行以上代码之后，会发现当前文件下多了一个&lt;code&gt;.git&lt;/code&gt;的文件，这个是用户管理跟踪本地版本库的，千万不要去乱动，不然就乱了可就麻烦了。&lt;/p&gt;
&lt;h1 id=&quot;在github创建一个远程仓库&quot;&gt;&lt;a href=&quot;#在github创建一个远程仓库&quot; class=&quot;headerlink&quot; title=&quot;在github创建一个远程仓库&quot;&gt;&lt;/a&gt;在github创建一个远程仓库&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/01/20/5a623aa9edfea.png&quot; alt=&quot;QQ20180120-023559@2x.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2018/01/20/5a623b469e50a.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="常见问题总结" scheme="http://jirengujack.cn/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="git" scheme="http://jirengujack.cn/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/git/"/>
    
    
      <category term="git" scheme="http://jirengujack.cn/tags/git/"/>
    
      <category term="git init" scheme="http://jirengujack.cn/tags/git-init/"/>
    
  </entry>
  
  <entry>
    <title>动态REM方案</title>
    <link href="http://jirengujack.cn/2018/01/18/%E5%8A%A8%E6%80%81REM%E6%96%B9%E6%A1%88/"/>
    <id>http://jirengujack.cn/2018/01/18/动态REM方案/</id>
    <published>2018-01-17T16:57:25.000Z</published>
    <updated>2018-01-23T17:47:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态REm方案"><a href="#动态REm方案" class="headerlink" title="动态REm方案"></a>动态REm方案</h1><h2 id="浏览器禁止980px缩放"><a href="#浏览器禁止980px缩放" class="headerlink" title="浏览器禁止980px缩放"></a>浏览器禁止980px缩放</h2><p>使用<code>&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;</code>禁止浏览缩放。我自己测试的结果是，只要meta的content里面有’initial-scale=1/2/3’、’width=device-width’或者’user-scalable=no’,页面都不能缩放。<br>如果同时写minimum-scale和maximum-scale=1了，最大和最小缩放都是1，那肯定不支持缩放了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    //内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="设置html的font-size"><a href="#设置html的font-size" class="headerlink" title="设置html的font-size"></a>设置html的font-size</h2><p>设置<code>html{font-size:页面宽度/10}</code>，<code>font-size</code>的值不能太小，因为浏览器有默认最小字体，Chrome的是12px；也不能设置太大，太大会导致你页面的数字都会很小。一般我们都是使用js来动态的设置<code>font-size</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">`&lt;style&gt;html&#123;font-size:<span class="subst">$&#123;clientWidth<span class="regexp">/10&#125;px&#125;&lt;/</span>style&gt;<span class="string">`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">//如果这样写，这一段代码最好卸载`</span>&lt;head&gt;<span class="string">`标签里面</span></span></span></span><br></pre></td></tr></table></figure><h2 id="如何在页面使用"><a href="#如何在页面使用" class="headerlink" title="如何在页面使用"></a>如何在页面使用</h2><p>这样一来，在meta中width=content-width的前提条件下，例如获取的clientWidth=375px，font-size=37.5px，1rem=37.5px如果想让一个元素的宽度占满整个屏幕，就可以把它的宽度设为10rem即可。<br>rem就是一个相对单位，相对于clientWidth，如果clientWidth变化，所有使用rem作为单位的元素都会按照比例变化，布局不会错乱。</p><h2 id="使用less更方便"><a href="#使用less更方便" class="headerlink" title="使用less更方便"></a>使用less更方便</h2><p>有个问题，这样每次都要手动去计算对应的比例，例如需要24px，就要用计算器算一下24/37.5,如果需要88px，就要再次计算88/37.5…很麻烦。所以使用less就很方便了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 此处 @r 具体数值根据设计图尺寸而定</span></span><br><span class="line"><span class="comment"> * flexible中设置的标准是【fontSize=16px, when 屏幕宽度=375】，因此，按此标准进行计算，</span></span><br><span class="line"><span class="comment"> * 若设计图为iPhone6(375*667)的二倍稿，则@r设置为32rem</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable">@r:</span><span class="number">32rem</span>;<span class="comment">//设置一个常量</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">80</span>/<span class="variable">@r</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80</span>/<span class="variable">@r</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *这里相当于80/@r === 80/32rem === 80/32*font-size === 80/32*(clientWidth/10)</span></span><br><span class="line"><span class="comment"> *如果想把宽度设置为100%，就可以设为320/@r;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h1><p>在网上看了很多，说的有些很难理解，我就自己解释一下更容易看懂，防止以后忘了还要去找，再一次去理解，先解释一下meta标签里面的内容。</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code></p><ol><li><p><font style="color:red;font-weight:700">viewport</font><br><code>viewport</code>在pc端指的就是浏览器能看到的区域的大小，包括滚动条，不包括浏览器工具栏。HTML元素大小就是根据viewport来说的，HTML宽度的100%就是相当于viewport的100%。<br>在移动端，viewport默认的宽度是980px，</p></li><li><p><font style="color:red;font-weight:700">width</font><br><code>content</code>中的width值得手机端的视觉视口，也就是手机屏幕的宽度，<code>width</code>就是你自己的手机屏幕的宽度。<br>如果值设为<code>device-width</code>，就相当于把理想视口大小设为视觉视口大小，也相当于缩放比例为1了。</p></li><li><p><font style="color:red;font-weight:700">device-width</font><br><code>device-width</code>指的是理想视口，是相对于手机的dpr和设备像素来说的。</p></li><li><p><font style="color:red;font-weight:700">设备像素</font><br><code>设备像素</code>，每一个手机的设备像素都是固定的，例如iPhone6的是750px，iPhone4的是640px。</p></li><li><p><font style="color:red;font-weight:700">dpr</font><br><code>dpr</code>指的是手机的设备像素比，这个值也是固定的，例如iPhone4、iPhone6的是2，Galaxy S5的是3。</p><ul><li><strong>公式前提：缩放比例为1。</strong></li><li><strong>dpr = 设备像素大小 / 理想视口大小（css像素大小）</strong>  <em>//使用宽度或高度计算都可</em>以</li><li><strong>缩放操作的都是理想视口大小，也就是css像素。</strong></li></ul></li></ol><ol><li><p><font style="color:red;font-weight:700">user-scalable</font><br><code>user-scalable</code>指的是否支持双击缩放，如果值设为’no’就是不支持，设为’yes‘就是支持</p></li><li><p><font style="color:red;font-weight:700">initial-scale</font><br><code>initial-scale</code>指的是默认的缩放比例，最好使用js动态控制，解决1px border问题</p></li><li><p><font style="color:red;font-weight:700">maximum-scale</font><br><code>maximum-scale</code>指的是最大的缩放比例，最好使用js动态控制，解决1px border问题</p></li><li><p><font style="color:red;font-weight:700">minimum-scale</font><br><code>minimum-scale</code>指的是最小的缩放比例，最好使用js动态控制，解决1px border问题</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态REm方案&quot;&gt;&lt;a href=&quot;#动态REm方案&quot; class=&quot;headerlink&quot; title=&quot;动态REm方案&quot;&gt;&lt;/a&gt;动态REm方案&lt;/h1&gt;&lt;h2 id=&quot;浏览器禁止980px缩放&quot;&gt;&lt;a href=&quot;#浏览器禁止980px缩放&quot; class=&quot;headerlink&quot; title=&quot;浏览器禁止980px缩放&quot;&gt;&lt;/a&gt;浏览器禁止980px缩放&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;user-scalable=no&amp;quot;&lt;/code&gt;禁止浏览缩放。我自己测试的结果是，只要meta的content里面有’initial-scale=1/2/3’、’width=device-width’或者’user-scalable=no’,页面都不能缩放。&lt;br&gt;如果同时写minimum-scale和maximum-scale=1了，最大和最小缩放都是1，那肯定不支持缩放了。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web移动端" scheme="http://jirengujack.cn/categories/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="动态REM" scheme="http://jirengujack.cn/categories/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E5%8A%A8%E6%80%81REM/"/>
    
    
      <category term="动态REM" scheme="http://jirengujack.cn/tags/%E5%8A%A8%E6%80%81REM/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计（第3版）之《script元素》</title>
    <link href="http://jirengujack.cn/2018/01/15/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E4%B9%8B%E3%80%8Ascript%E5%85%83%E7%B4%A0%E3%80%8B/"/>
    <id>http://jirengujack.cn/2018/01/15/javascript高级程序设计（第3版）之《script元素》/</id>
    <published>2018-01-14T16:13:17.000Z</published>
    <updated>2018-01-15T17:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lt-script-gt-元素属性"><a href="#lt-script-gt-元素属性" class="headerlink" title="&lt;script&gt;元素属性"></a><code>&lt;script&gt;</code>元素属性</h3><table><thead><tr><th>属性</th><th>定义</th></tr></thead><tbody><tr><td>async</td><td>【可选】。可以异步加载，表示可以立即下载此脚本，但不影响页面其他操作。<strong>只对外部脚本有效</strong>。</td></tr><tr><td>charset</td><td>【可选】。表示通过src属性制定代码的字符集。由于多数浏览器会忽略此属性，很少人使用。</td></tr><tr><td>defer</td><td>【可选】。表示脚本可以掩饰到文档完全被解析和显示之后再执行。<strong>只对外部脚本有效。IE7及更早的版本对嵌入脚本也支持此属性。</strong></td></tr><tr><td>language</td><td>已废弃。</td></tr><tr><td>src</td><td>【可选】。表示要执行外部文件的路径或链接。</td></tr><tr><td>type</td><td>【可选】。默认为text/javascript。可以视为language的替代品。表示编写代码使用的脚本语言的内容类型（也成为MIME类型）</td></tr></tbody></table><a id="more"></a><h4 id="defer延迟脚本"><a href="#defer延迟脚本" class="headerlink" title="defer延迟脚本"></a>defer延迟脚本</h4><p>  这个属性表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完成之后再运行。因此，在<code>&lt;script&gt;</code>元素中设置defer属性，就是告诉浏览器此脚本立即下载，但是延迟执行。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example1.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example2.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里放代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  这以上例子中，虽然我们把<code>&lt;script&gt;</code>元素放在了文档的<code>&lt;head&gt;</code>元素中，但其中包含的脚本将延迟到整个<code>&lt;html&gt;</code>解析完成之后再执行。由于HTML5规范要求脚本按照他们出现的先后顺序执行，因此第一个延迟脚本会优先于第二个执行，二这两个脚本会优先于DOMContentLoaded事件执行。在实际运用中，两个延迟脚本不一定会按照顺序执行，也不一定会在DOMContentLoaded事件触发前执行，因此最后只包含一个延迟脚本。defer属性很少使用。</p><h4 id="async异步脚本"><a href="#async异步脚本" class="headerlink" title="async异步脚本"></a>async异步脚本</h4><p>  这个属性与defer属性蕾西，都用于改变处理脚本的行为。与defer不同的是，使用async的脚本并不能保证按照指定他们的先后属性执行。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example1.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example2.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里放代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  在以上例子中，第二个脚本可能会优先于第一个脚本执行，也不能不是。因此，如果使用async属性，确保两者之后互相不依赖非常重要。指定async属性的目的是不让页面等待两个脚本的下载与执行，而是可以异步的加载页面的其他内容。所以，建议异步脚本不要在加载期间修改DOM，以免出现错误。</p><p>  异步脚本一定会在页面load事件前执行，但可能会在DOMContentLoaded事件触发之前或之后执行，因此，使用此属性的人也很少。</p><h3 id="lt-scrip-gt-元素嵌入JavaScript代码的用法"><a href="#lt-scrip-gt-元素嵌入JavaScript代码的用法" class="headerlink" title="&lt;scrip&gt;元素嵌入JavaScript代码的用法"></a><code>&lt;scrip&gt;</code>元素嵌入JavaScript代码的用法</h3><h4 id="两种用法"><a href="#两种用法" class="headerlink" title="两种用法"></a>两种用法</h4><ol><li><p>直接在页面内部嵌入JavaScript代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'hello,word'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在外部引用JavaScript代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"example.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"../example.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"https://code.jquery.com/jquery-3.2.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h4 id="特别强调"><a href="#特别强调" class="headerlink" title="特别强调"></a>特别强调</h4><ol><li><p>包含在<code>&lt;script&gt;</code>元素内部的代码会被从上至下一次解释。所以在元素内部不要出现”<code>&lt;/script&gt;</code>“字符串，否则会报错。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'&lt;/script&gt;'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Uncaught SyntaxError: Invalid or unexpected token</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/页面只会显示"')&#125;"字符串</span></span><br></pre></td></tr></table></figure><p>​如果确实要使用”<code>&lt;/script&gt;</code>“字符串，可以加上转义符’\’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'&lt;\/script&gt;'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用外部引入javascript时，src属性是必须的。这个属性值是一个指向外部JavaScript文件的路径或链接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"example.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用此方式引入JavaScript时，在<code>&lt;script&gt;</code>内部不要写任何额外的JavaScript代码。如果写了会被忽略。</p><p>无论使用任何方式，只要不存在defer和async属性，浏览器都会按照<code>&lt;script&gt;</code>元素在页面中出现的先后顺序依次解析。所以说，JavaScript代码最好放在<code>&lt;body&gt;</code>标签尾部，防止白屏之类问题。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;lt-script-gt-元素属性&quot;&gt;&lt;a href=&quot;#lt-script-gt-元素属性&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;script&amp;gt;元素属性&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素属性&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;async&lt;/td&gt;
&lt;td&gt;【可选】。可以异步加载，表示可以立即下载此脚本，但不影响页面其他操作。&lt;strong&gt;只对外部脚本有效&lt;/strong&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;charset&lt;/td&gt;
&lt;td&gt;【可选】。表示通过src属性制定代码的字符集。由于多数浏览器会忽略此属性，很少人使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;defer&lt;/td&gt;
&lt;td&gt;【可选】。表示脚本可以掩饰到文档完全被解析和显示之后再执行。&lt;strong&gt;只对外部脚本有效。IE7及更早的版本对嵌入脚本也支持此属性。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;language&lt;/td&gt;
&lt;td&gt;已废弃。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src&lt;/td&gt;
&lt;td&gt;【可选】。表示要执行外部文件的路径或链接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;【可选】。默认为text/javascript。可以视为language的替代品。表示编写代码使用的脚本语言的内容类型（也成为MIME类型）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://jirengujack.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript高级程序设计（第3版）" scheme="http://jirengujack.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89/"/>
    
    
      <category term="读书笔记" scheme="http://jirengujack.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>html2canvas截图</title>
    <link href="http://jirengujack.cn/2018/01/12/html2canvas%E6%88%AA%E5%9B%BE/"/>
    <id>http://jirengujack.cn/2018/01/12/html2canvas截图/</id>
    <published>2018-01-11T18:14:18.000Z</published>
    <updated>2018-01-11T18:40:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用html2canvas截图"><a href="#使用html2canvas截图" class="headerlink" title="使用html2canvas截图"></a>使用html2canvas截图</h3><ol><li>进入<a href="http://html2canvas.hertzen.com/" target="_blank" rel="noopener">官网</a>，可以看到如下截图，点开箭头位置文件，在自己项目下建立一个js文件，把里面内容拷贝进去。<br><img src="https://i.loli.net/2018/01/12/5a57aa8755285.png" alt="Snip20180112_12.png"><a id="more"></a></li><li><p>在你想要截图的页面添加一个按钮，添加click事件，写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(<span class="built_in">document</span>.querySelector(<span class="string">"#capture"</span>)).then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(canvas)<span class="comment">//#capture 是你想截图容器id或class，会把次id或class里面的内容都截图</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果想点击之后直接下载，可以使用file-saver插件，先安装此插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">file</span>-saver -g</span><br></pre></td></tr></table></figure></li><li><p>修改js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(<span class="built_in">document</span>.querySelector(<span class="string">'#resumePreview'</span>)).then(<span class="function"><span class="keyword">function</span> (<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">  canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">    FileSaver.saveAs(blob, <span class="string">'Resume.png'</span>)<span class="comment">//‘Resume.png’可以自己修改</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><a href="http://www.jirengujack.cn/vue-resume/dist/#/" target="_blank" rel="noopener">vue在线简历制作</a> 这个是我自己的第一个稍微完整的一个小项目，在不断赶紧中，多多指点。在预览之后左上角会有截图按钮哦，<br>点击按钮之后会自动下载。<br><img src="https://i.loli.net/2018/01/12/5a57aef8ae021.png" alt="Snip20180112_15.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用html2canvas截图&quot;&gt;&lt;a href=&quot;#使用html2canvas截图&quot; class=&quot;headerlink&quot; title=&quot;使用html2canvas截图&quot;&gt;&lt;/a&gt;使用html2canvas截图&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进入&lt;a href=&quot;http://html2canvas.hertzen.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;，可以看到如下截图，点开箭头位置文件，在自己项目下建立一个js文件，把里面内容拷贝进去。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2018/01/12/5a57aa8755285.png&quot; alt=&quot;Snip20180112_12.png&quot;&gt;
    
    </summary>
    
      <category term="js工具" scheme="http://jirengujack.cn/categories/js%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="html2canvas截图" scheme="http://jirengujack.cn/tags/html2canvas%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>VUE常见问题总结</title>
    <link href="http://jirengujack.cn/2018/01/10/VUE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://jirengujack.cn/2018/01/10/VUE常见问题总结/</id>
    <published>2018-01-09T18:44:54.000Z</published>
    <updated>2018-01-19T19:09:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-run-build不成功"><a href="#npm-run-build不成功" class="headerlink" title="npm run build不成功"></a>npm run build不成功</h1><p>使用vue-cli，并且使用router的时候，build之后页面没有任何报错，但是页面出现空白，可能有两个原因：</p><ol><li>build配置路径错误</li><li>router使用了‘history’</li></ol><a id="more"></a><p>解决方法：</p><pre><code>1. 在config/inde.js找到以下代码，修改assetsPulicPath的路径</code></pre><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">build</span>: &#123;</span><br><span class="line">    <span class="comment">// Template for index.html</span></span><br><span class="line">    <span class="attribute">index</span>: path.resolve(__dirname, <span class="string">'../dist/index.html'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    <span class="attribute">assetsRoot</span>: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    <span class="attribute">assetsSubDirectory</span>: <span class="string">'static'</span>,</span><br><span class="line">    <span class="attribute">assetsPublicPath</span>: <span class="string">'/'</span>,<span class="comment">//在这一行把路径改一下，</span></span><br><span class="line">        ...<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>举个例子：例如本地的整个项目名称为resume，build生成dist的路径为resume/dist，通过github pages来展示页面，在github里面，本地的resume对应远程仓库名称为resume，github pages页面提供的网址是yourname/github.io/resume，那么这里的路径就要改成/resume/dist/才可以</em></p><pre><code>2. 打开src自己配置的router文件，里面的mode: &apos;history&apos;删除了就可以了。</code></pre><h1 id="使用v-for里面的数据动态绑定class"><a href="#使用v-for里面的数据动态绑定class" class="headerlink" title="使用v-for里面的数据动态绑定class"></a>使用v-for里面的数据动态绑定class</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in resume.skills"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"item.Name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>直接使用v-bind绑定class，引号里面引用v-for里面的数据动态绑定class</em></p><h1 id="使用v-for里面的数据动态绑定style"><a href="#使用v-for里面的数据动态绑定style" class="headerlink" title="使用v-for里面的数据动态绑定style"></a>使用v-for里面的数据动态绑定style</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in resume.skills"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;width:item.Proficiency&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>直接使用v-bind绑定style，引号里面属性值引用v-for里面的数据即可动态绑定style</em></p><h1 id="使用readonly，可以给input添加click事件"><a href="#使用readonly，可以给input添加click事件" class="headerlink" title="使用readonly，可以给input添加click事件"></a>使用readonly，可以给input添加click事件</h1><p>如果使用disabled，给input添加click事件就没有效果。也可以动态控制readonly状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">click</span>=<span class="string">"alertMessage"</span> <span class="attr">:readonly</span> = <span class="string">'readonly'</span>&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: '#app';</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            readonly: true || false//这个可以根据具体情况设置boolean值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;npm-run-build不成功&quot;&gt;&lt;a href=&quot;#npm-run-build不成功&quot; class=&quot;headerlink&quot; title=&quot;npm run build不成功&quot;&gt;&lt;/a&gt;npm run build不成功&lt;/h1&gt;&lt;p&gt;使用vue-cli，并且使用router的时候，build之后页面没有任何报错，但是页面出现空白，可能有两个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build配置路径错误&lt;/li&gt;
&lt;li&gt;router使用了‘history’&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="常见问题总结" scheme="http://jirengujack.cn/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
      <category term="vue-cli" scheme="http://jirengujack.cn/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/vue-cli/"/>
    
    
      <category term="常见问题" scheme="http://jirengujack.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
      <category term="vue" scheme="http://jirengujack.cn/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://jirengujack.cn/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常见问题和配置</title>
    <link href="http://jirengujack.cn/2018/01/07/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://jirengujack.cn/2018/01/07/Hexo常见问题和配置/</id>
    <published>2018-01-07T15:48:08.000Z</published>
    <updated>2018-01-23T17:50:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异地管理博客"><a href="#异地管理博客" class="headerlink" title="异地管理博客"></a>异地管理博客</h1><p>如果使用多台电脑发布更新博客，我自己的做法是在同一个远程仓库建立两个分支：</p><ol><li>master分支，用户保存hexo里的public文件里面的内容，也就是hexo生成的博客文件。</li><li>hexo分支，用户保存所有的hexo的源文件【可能会暴露源文件secret key】</li></ol><a id="more"></a><h2 id="基础假设"><a href="#基础假设" class="headerlink" title="基础假设"></a>基础假设</h2><ol><li>已经搭建好hexo</li><li>已经配置好next主题</li><li>已经关联了github，可以使用github直接访问博客首页</li><li>具体的简单操作没有截图，如果不会自行搜索即可找到答案</li></ol><h2 id="创建本地git仓库"><a href="#创建本地git仓库" class="headerlink" title="创建本地git仓库"></a>创建本地git仓库</h2><p>首先需要删除next下面的git配置，否则无法把next主题文件同步到远程仓库，进入到hexo根目录执行以下代码：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -fr .<span class="regexp">/themes/</span><span class="keyword">next</span><span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure></p><p>然后初始化hexo根目录<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure></p><p>创建一个.gitignore文件，放在hexo根目录，内容为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></p><h2 id="创建远程仓库的分支"><a href="#创建远程仓库的分支" class="headerlink" title="创建远程仓库的分支"></a>创建远程仓库的分支</h2><p>目前远程仓库已经有一个默认的master分支，然后自己创建一个hexo分支，并且把hexo设置为默认分支，方便手动操作push本地源文件。<br><img src="https://i.loli.net/2018/01/09/5a53a76ea4c8a.png" alt=""><br><img src="https://i.loli.net/2018/01/09/5a53a8565d7f8.png" alt=""></p><h2 id="push本地源文件到远程仓库hexo分支"><a href="#push本地源文件到远程仓库hexo分支" class="headerlink" title="push本地源文件到远程仓库hexo分支"></a>push本地源文件到远程仓库hexo分支</h2><p>进入到hexo根目录，使用终端打开一次执行以下代码：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">'push to hexo'</span></span></span><br><span class="line"><span class="bash">git push origin master:hexo</span></span><br></pre></td></tr></table></figure></p><p>这时候你可以看到远程仓库已经有本地的hexo源文件。以后每次发布博客之后就可以操作以上代码更新本地源文件到远程仓库的hexo分支了。<br>提醒：如操作过程中有其他报错小问题，需要自行google，这里只是说一个大概思路。</p><h1 id="next主题同步到远程仓库"><a href="#next主题同步到远程仓库" class="headerlink" title="next主题同步到远程仓库"></a>next主题同步到远程仓库</h1><p>我使用的是以下代码，可以同步到远程仓库hexo，但是具体原因不知道，就是成功了。上方提到的直接删除thems/next 下面的.git 文件我自己没有尝试，不知道有没有起作用<br>进入hexo根目录执行以下代码即可创建next主题：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure></p><p>使用这种方式下载next主题就可以直接同步提交到远程仓库，但是后期更新的还不懂。</p><h1 id="发布博客之后显示404"><a href="#发布博客之后显示404" class="headerlink" title="发布博客之后显示404"></a>发布博客之后显示404</h1><p>我自己遇到的问题是我已经绑定自己的域名，发布了一个项目之后打开报404，这个项目不在博客项目的同一个目录，我的博客网址是：<a href="http://www.jirengujack.cn" target="_blank" rel="noopener">http://www.jirengujack.cn</a>，此项目的路径为：<a href="http://www.jirengujack.cn/vue-mobile-question/dist" target="_blank" rel="noopener">http://www.jirengujack.cn/vue-mobile-question/dist</a>，下方截图是我github目前文件分布：</p><p><img src="https://i.loli.net/2018/01/21/5a6377612f163.png" alt="1.png"></p><p>搞了半天打开<a href="http://www.jirengujack.cn/vue-mobile-question/dist" target="_blank" rel="noopener">http://www.jirengujack.cn/vue-mobile-question/dist</a>这个路径下的文件都是404，最后发现没有设置github pages，具体步骤看一下截图：</p><p><img src="https://i.loli.net/2018/01/21/5a63786287920.png" alt="2.png"><br><img src="https://i.loli.net/2018/01/21/5a637862931a5.png" alt="3.png"><br><img src="https://i.loli.net/2018/01/21/5a6378988403d.png" alt="4.png"></p><p>以上操作之后，我的项目就可正常打开了，好欣慰啊，还得靠自己！哈哈哈哈<del>~</del><br>这个是我自己第一个移动端小demo，多多批评指导，参考了网上的一个开源项目，学习中~~<br>项目源码<a href="https://github.com/hunger-Jack/vue-mobile-question/" target="_blank" rel="noopener">https://github.com/hunger-Jack/vue-mobile-question/</a><br>在线预览<a href="http://www.jirengujack.cn/vue-mobile-question/dist/" target="_blank" rel="noopener">http://www.jirengujack.cn/vue-mobile-question/dist/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异地管理博客&quot;&gt;&lt;a href=&quot;#异地管理博客&quot; class=&quot;headerlink&quot; title=&quot;异地管理博客&quot;&gt;&lt;/a&gt;异地管理博客&lt;/h1&gt;&lt;p&gt;如果使用多台电脑发布更新博客，我自己的做法是在同一个远程仓库建立两个分支：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master分支，用户保存hexo里的public文件里面的内容，也就是hexo生成的博客文件。&lt;/li&gt;
&lt;li&gt;hexo分支，用户保存所有的hexo的源文件【可能会暴露源文件secret key】&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://jirengujack.cn/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="博客相关" scheme="http://jirengujack.cn/categories/web%E5%89%8D%E7%AB%AF/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Hexo" scheme="http://jirengujack.cn/tags/Hexo/"/>
    
      <category term="Next" scheme="http://jirengujack.cn/tags/Next/"/>
    
  </entry>
  
</feed>
